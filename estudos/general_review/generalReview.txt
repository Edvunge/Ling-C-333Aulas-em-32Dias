



C LANGUAGE ROADMAP

-
-
-


## * - * - * - * - * - * - **=** üìå Roadmap para Aprender C  

###  1Ô∏è‚É£ Fundamentos B√°sicos  
‚úÖ  Configura√ß√£o do Ambiente  
- Instalar um compilador (GCC, Clang, MSVC)  
- Escolher um editor/IDE (VS Code, Code::Blocks, CLion)  

‚úÖ  Sintaxe B√°sica  
- Estrutura de um programa em C (#include, main())  
- Tipos de dados primitivos (int, float, char, double)  
- Vari√°veis e constantes (const, #define)  
- Entrada e sa√≠da (printf, scanf)  

‚úÖ  Operadores e Express√µes  
- Aritm√©ticos (+, -, *, /, %)  
- Relacionais (==, !=, >, <)  
- L√≥gicos (&&, ||, !)  
- Bitwise (&, |, ^, ~, <<, >>)  

‚úÖ  Controle de Fluxo  
- Condicionais (if, else, switch-case)  
- La√ßos (for, while, do-while)  

---

### 2Ô∏è‚É£ Estruturas de Dados e Fun√ß√µes 
‚úÖ  Fun√ß√µes  
- Declara√ß√£o e chamada  
- Passagem de par√¢metros (por valor e por refer√™ncia)  
- Escopo de vari√°veis (local vs global)  
- Fun√ß√µes recursivas  

‚úÖ  Arrays e Strings  
- Arrays unidimensionais e multidimensionais  
- Strings (char[], gets, puts, strcpy, strlen)  

‚úÖ  Ponteiros  
- Conceito de endere√ßo e refer√™ncia  
- Operadores * (desrefer√™ncia) e & (endere√ßo)  
- Ponteiros e Arrays  
- Ponteiros e Strings  
- Ponteiros para Fun√ß√µes  

‚úÖ  Structs e Unions  
- Declara√ß√£o e uso de struct  
- Ponteiros para struct  
- typedef e enum  
- union (uso eficiente de mem√≥ria)  

---

### 3Ô∏è‚É£ Manipula√ß√£o de Mem√≥ria  
‚úÖ  Aloca√ß√£o Din√¢mica  
- malloc, calloc, realloc, free  
- Ponteiros duplos (char**, int**)  

‚úÖ  Manipula√ß√£o de Arquivos  
- Modos de abertura (r, w, a, rb, wb)  
- Leitura e escrita (fopen, fclose, fscanf, fprintf, fread, fwrite)  
- Manipula√ß√£o de arquivos bin√°rios  

---

### 4Ô∏è‚É£ Estruturas de Dados Avan√ßadas
‚úÖ  Listas Encadeadas  
- Lista simplesmente encadeada  
- Lista duplamente encadeada  
- Opera√ß√µes b√°sicas (inser√ß√£o, remo√ß√£o, busca)  

‚úÖ  Pilhas e Filas  
- Implementa√ß√£o com Arrays e Ponteiros  
- Uso de struct para representar pilhas e filas  

‚úÖ  √Årvores  
- √Årvores Bin√°rias  
- Percursos (pr√©-ordem, in-ordem, p√≥s-ordem)  
- √Årvores Balanceadas (AVL)  

---

### 5Ô∏è‚É£ T√≥picos Avan√ßados
‚úÖ  Threads e Concorr√™ncia  
- Biblioteca pthread.h  
- Sincroniza√ß√£o com mutex e semaphores  

‚úÖ  Compila√ß√£o e Otimiza√ß√£o  
- Makefile e gcc flags  
- Debugging com gdb e valgrind  

‚úÖ  Desenvolvimento de Projetos Reais  
- Criar um interpretador simples  
- Desenvolver um sistema de CRUD  
- Criar um jogo simples (ex: Snake em terminal)  

-
-
-
-
